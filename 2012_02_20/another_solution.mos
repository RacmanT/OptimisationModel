model Another_Solution
  options noimplicit
  uses "mmxprs"
  ! uses "mminsight" ! uncomment this line for an Xpress Insight model

  parameters
    NUMERO_BOSCHI = 3
    NUMERO_ANNI = 4
  end-parameters

  declarations

    BOSCHI = 1..NUMERO_BOSCHI
    ANNI = 1..NUMERO_ANNI

    DOMANDA: array(ANNI) of integer

    A: array(BOSCHI, ANNI) of integer

    ! z indica quanto legno non viene venduto in un certo anno
    z: array(ANNI) of mpvar

    ! x indica quanto legno prodotto in un certo anno viene venduto
    x: array(BOSCHI, ANNI) of mpvar

  end-declarations

  forall(a in ANNI) z(a) is_integer
  forall(a in ANNI, b in BOSCHI) x(b, a) is_integer

  A :: [10, 12,  7, 16,
         4,  2, 10,  9,
         6,  8, 11,  5]

  DOMANDA :: [16, 23, 26, 25]


  forall(b in BOSCHI, a in ANNI) x(b, a) <= A(b, a)
  

  z(1) = 0
  forall(a in ANNI) z(a) = sum(b in BOSCHI) x(b, a) - DOMANDA(a) + if(a >= 2, z(a - 1), 0)


  ! per ogni anno la domanda deve essere soddisfatta
  ! forall(a in ANNI) sum(b in BOSCHI) x(b, a) + z(a) >= DOMANDA(a)
  forall(a in ANNI) sum(b in BOSCHI) x(b, a) + if(a = 1, 0, sum(a1 in 1..a) z(a1)) >= DOMANDA(a)

  minimise(sum(a in ANNI)z(a))
  writeln(getobjval)


forall (a in ANNI) do
  forall (i in BOSCHI) writeln("Nell'anno ", a, " e nel bosco ", i, " è stato raccolto\t", getsol(x(i, a)))
end-do

forall (a in ANNI) writeln("la quantità in eccesso è ", getsol(z(a)))


end-model
