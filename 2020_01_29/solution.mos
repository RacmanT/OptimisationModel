
model ModelName
uses "mmxprs"; !gain access to the Xpress-Optimizer solver

forward procedure printSolution

 declarations
 	P = 1..3  							! pacchetti
  	A = 1..10							! attività

  	d: array(A) of real    	! durata dell'attività a
	v: array(A) of integer		! valutazione dell'attività a
	c: array(A) of real		! costo dell'attività a

	Dmax: array(P) of real  ! durata complessiva massima del pacchetto p
	Vmin: array(P) of integer  ! valutazione complessiva minima del pacchetto p

  	x: array(A, P) of mpvar   	! 1 se l'attività a è assocciata al pacchetto p
                                ! 0 altrimenti
    y: mpvar     ! minima differenza di costo tra ogni coppia di pacchetti

    z: array(P,P) of mpvar  !  1 se il pacchetto p1 ha un costo maggiore del pacchetto p2
    						!  0 altrimenti

    cost: array(P) of mpvar ! costo complessivo del pacchetto p (non necessario ma utile per semplificare la formulazione)

    bigM: integer
 end-declarations


bigM := 100000

Dmax ::[ 10, 12, 16]
Vmin ::[ 7, 6, 5]


d ::[ 6, 2, 5, 4, 1.5, 2.5, 3, 6, 2, 3]
v ::[ 4, 1, 3, 3, 1, 3, 1, 3, 2, 2]
c ::[ 120, 40, 150, 20, 30, 50, 90, 60, 70, 20]

forall(p in P) do
	forall(p2 in P) z(p,p2) is_binary
	forall(a in A) x(a,p) is_binary
end-do


!ogni attività deve essere associata ad un solo pacchetto
forall(a in A) sum(p in P) x(a,p) <= 1


!ogni pacchetto deve avere una durata complessiva massima e una valutazione complessiva minima
forall(p in P) do
	sum(a in A) (x(a,p)*d(a)) <= Dmax(p)
	sum(a in A) (x(a,p)*v(a)) >= Vmin(p)
end-do

!costo pacchetto
forall(p in P) cost(p) = sum(a in A) (x(a,p)*c(a))


costo := sum(p in P) cost(p)
writeln("Begin running model \n\n")


minimize(costo)

printSolution

forall(p in P, p1 in P | p <> p1) do
	cost(p) - cost(p1) >=  90 - bigM * (1 - z(p,p1))
	cost(p) - cost(p1) <= -90 + bigM * z(p,p1)
end-do

minimize(costo)


printSolution

forall(p in P, p1 in P | p <> p1) do
	cost(p) - cost(p1) >=  y - bigM *(1 - z(p,p1))
	cost(p) - cost(p1) <= -y + bigM *(z(p,p1))
end-do


maximize(y)
printSolution
writeln("differenza di costo minima: " + getsol(y))

writeln("\n\nEnd running model")


procedure printSolution
	writeln("Costo complessivo: ", sum(p in P) getsol(cost(p)))

	write("A: \t")
	forall(a in A) do
		write("" + a + "\t")
	end-do
		write("Costo\t")
	write("\n")
	forall(p in P) do
		write("P" + p + "\t")
		forall(a in A) do
				write(if(getsol(x(a,p))=1, "X\t", " \t"))
				end-do
				write(getsol(cost(p)))
		write("\n")
	end-do

end-procedure



end-model
