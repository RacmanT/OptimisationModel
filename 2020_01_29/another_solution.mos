model ModelName
  options noimplicit
  uses "mmxprs"
  ! uses "mminsight" ! uncomment this line for an Xpress Insight model

  parameters
    NUMERO_PACCHETTI = 3
    NUMERO_ATTIVITA  = 10
  end-parameters

  declarations

    PACCHETTI = 1..NUMERO_PACCHETTI
    ATTIVITA  = 1..NUMERO_ATTIVITA

    DURATA_MASSIMA        : array(PACCHETTI) of integer
    VALUTAZIONE_MINIMA    : array(PACCHETTI) of integer

    DURATA_ATTIVITA       : array(ATTIVITA) of real
    COSTO_ATTIVITA        : array(ATTIVITA) of integer
    VALUTAZIONE_ATTIVITA  : array(ATTIVITA) of integer

    ! indica se l'attività a è inserita nel pacchetto p
    x: array(ATTIVITA, PACCHETTI) of mpvar

  end-declarations

    forall(a in ATTIVITA, p in PACCHETTI) x(a, p) is_binary


    DURATA_MASSIMA     :: [10, 12, 16]
    VALUTAZIONE_MINIMA :: [7, 6, 5]

    DURATA_ATTIVITA      :: [6, 2, 5, 4, 1.5, 2.5, 3, 6, 2, 3]
    COSTO_ATTIVITA       :: [120, 40, 150, 20, 30, 50, 90, 60, 70, 20]
    VALUTAZIONE_ATTIVITA :: [4, 1, 3, 3, 1, 3, 1, 3, 2, 2]

    ! ogni attivita deve essere inserita in uno ed un solo pacchetto
    forall(a in ATTIVITA) sum(p in PACCHETTI) x(a, p) <= 1

    ! ogni pacchetto deve avere una valutazione minima
    forall(p in PACCHETTI) sum(a in ATTIVITA) x(a, p) * VALUTAZIONE_ATTIVITA(a) >= VALUTAZIONE_MINIMA(p)

    ! la durata di ogni pacchetto non deve superare la sua durata massima
    forall(p in PACCHETTI) sum(a in ATTIVITA) x(a, p) * DURATA_ATTIVITA(a) <= DURATA_MASSIMA(p)



    minimise(sum(a in ATTIVITA, p in PACCHETTI) x(a, p) * COSTO_ATTIVITA(a))
    forall(p in PACCHETTI) writeln("Il pacchetto ", p, " costa ", sum(a in ATTIVITA) getsol(x(a, p)) * COSTO_ATTIVITA(a))
    writeln("")

    ! ---------------------- II PARTE ----------------------
    declarations
      w: array(PACCHETTI, PACCHETTI) of mpvar

      costo_pacchetto : array(PACCHETTI) of linctr
      differenza_90_1 : array(PACCHETTI, PACCHETTI) of linctr
      differenza_90_2 : array(PACCHETTI, PACCHETTI) of linctr

    end-declarations

    forall(p in PACCHETTI) costo_pacchetto(p) := sum(a in ATTIVITA) x(a, p) * COSTO_ATTIVITA(a)

    forall(p1, p2 in PACCHETTI) w(p1, p2) is_binary

    forall(p1, p2 in PACCHETTI | p1 <> p2) do
      differenza_90_1(p1, p2) := costo_pacchetto(p1) - costo_pacchetto(p2) >= 90 - MAX_INT  * (1 - w(p1, p2) )
      differenza_90_2(p1, p2) := costo_pacchetto(p1) - costo_pacchetto(p2) <= - 90 + MAX_INT  * w(p1, p2)
    end-do

    minimise(sum(a in ATTIVITA, p in PACCHETTI) x(a, p) * COSTO_ATTIVITA(a))
    forall(p in PACCHETTI) writeln("Il pacchetto ", p, " costa ", sum(a in ATTIVITA) getsol(x(a, p)) * COSTO_ATTIVITA(a))


    ! ---------------------- III PARTE ----------------------

    declarations
      differenza_minima : mpvar
    end-declarations

    forall(p1, p2 in PACCHETTI) do
      sethidden(differenza_90_1(p1, p2), true)
      sethidden(differenza_90_2(p1, p2), true)
    end-do

    forall(p1, p2 in PACCHETTI | p1 <> p2) do
      costo_pacchetto(p1) - costo_pacchetto(p2) >= differenza_minima - MAX_INT  * (1 - w(p1, p2) )
      costo_pacchetto(p1) - costo_pacchetto(p2) <= - differenza_minima + MAX_INT  * w(p1, p2)
    end-do

  maximise(differenza_minima)
  writeln("\nDifferenza minima: ", getobjval)
  forall(p in PACCHETTI) writeln("Il pacchetto ", p, " costa ", sum(a in ATTIVITA) getsol(x(a, p)) * COSTO_ATTIVITA(a))


end-model
